/*
    Day 66 coding Statement : Palindromic substrings

Anoop likes strings a lot but he likes palindromic strings more. Today, Anoop has two strings A and B, each consisting of lower case alphabets.

Anoop is eager to know whether it is possible to choose some non empty strings s1 and s2 where s1 is a substring of A, s2 is a substring of B such that s1 + s2 is a palindromic string.

Here '+' denotes the concatenation between the strings.

Input

First line of input contains a single integer T denoting the number of test cases.

For each test case:

First line contains the string A

Second line contains the string B.

Output

For each test case, Print "Yes" (without quotes) if it possible to choose such strings s1 & s2. Print "No" (without quotes) otherwise.

Input

3

abc

abc

a

b

abba

baab

Output

Yes

No

Yes
*/
import java.util.Scanner;

public class PalindromeSubstrings {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            String a = sc.next();
            String b = sc.next();

            boolean found = false;

            // Check if any substring of A is a palindrome when concatenated with a substring of B
            for (int i = 0; i < a.length(); i++) {
                for (int j = i; j < a.length(); j++) {
                    String s1 = a.substring(i, j + 1);
                    for (int k = 0; k < b.length(); k++) {
                        for (int l = k; l < b.length(); l++) {
                            String s2 = b.substring(k, l + 1);
                            if (isPalindrome(s1 + s2)) {
                                found = true;
                                break;
                            }
                        }
                    }
                }
            }

            // Check if any substring of B is a palindrome when concatenated with a substring of A
            for (int i = 0; i < b.length(); i++) {
                for (int j = i; j < b.length(); j++) {
                    String s1 = b.substring(i, j + 1);
                    for (int k = 0; k < a.length(); k++) {
                        for (int l = k; l < a.length(); l++) {
                            String s2 = a.substring(k, l + 1);
                            if (isPalindrome(s1 + s2)) {
                                found = true;
                                break;
                            }
                        }
                    }
                }
            }

            if (found) {
                System.out.println("Yes");
            } else {
                System.out.println("No");
            }
        }
    }

    public static boolean isPalindrome(String s) {
        int start = 0;
        int end = s.length() - 1;

        while (start < end) {
            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }

        return true;
    }
}
