/*
	Day 92 coding Statement : 

Let X be the set of all integers between 0 and n-1. Suppose we have a collection S1, S2, ..., Sm of subsets of X. Say an atom A is a subset of X such that for each Si we have either A is a subset of Si or A and Si do not have any common elements.

Your task is to find a collection A1, ..., Ak of atoms such that every item in X is in some Ai and no two Ai, Aj with i ≠ j share a common item. Surely such a collection exists as we could create a single set {x} for each x in X. A more interesting question is to minimize k, the number of atoms.

Input

The first line contains a single positive integer t ≤ 30 indicating the number of test cases. Each test case begins with two integers n,m where n is the size of X and m is the number of sets Si. Then m lines follow where the i'th such line begins with an integer vi between 1 and n (inclusive) indicating the size of Si. Following this are vi distinct integers between 0 and n-1 that describe the contents of Si.

You are guaranteed that 1 ≤ n ≤ 100 and 1 ≤ m ≤ 30. Furthermore, each number between 0 and n-1 will appear in at least one set Si.

Output

For each test case you are to output a single integer indicating the minimum number of atoms that X can be partitioned into to satisfy the constraints.

Sample Input

2

5 2

3 0 1 2

3 2 3 4

4 3

2 0 1

2 1 2

2 2 3

Sample Output

3

4

 
*/
import java.util.*;

public class Main {
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for (int i = 0; i < t; i++) {
            int n = scanner.nextInt();
            int m = scanner.nextInt();
            List<Set<Integer>> sets = new ArrayList<>();
            for (int j = 0; j < m; j++) {
                int size = scanner.nextInt();
                Set<Integer> set = new HashSet<>();
                for (int k = 0; k < size; k++) {
                    set.add(scanner.nextInt());
                }
                sets.add(set);
            }
            int result = findMinAtoms(n, sets);
            System.out.println(result);
        }
        scanner.close();
    }
    
    public static int findMinAtoms(int n, List<Set<Integer>> sets) {
        List<Set<Integer>> atoms = new ArrayList<>();
        for (Set<Integer> set : sets) {
            boolean found = false;
            for (Set<Integer> atom : atoms) {
                if (atom.containsAll(set)) {
                    found = true;
                    break;
                } else if (Collections.disjoint(atom, set)) {
                    continue;
                } else {
                    Set<Integer> intersection = new HashSet<>(atom);
                    intersection.retainAll(set);
                    Set<Integer> difference1 = new HashSet<>(atom);
                    difference1.removeAll(intersection);
                    Set<Integer> difference2 = new HashSet<>(set);
                    difference2.removeAll(intersection);
                    atoms.remove(atom);
                    if (!difference1.isEmpty()) {
                        atoms.add(difference1);
                    }
                    if (!difference2.isEmpty()) {
                        atoms.add(difference2);
                    }
                    found = true;
                    break;
                }
            }
            if (!found) {
                atoms.add(set);
            }
        }
        return atoms.size();
    }
}
